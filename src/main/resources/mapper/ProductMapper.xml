<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 물건구매와 관련한 mapperxml -->
<!-- projectG2의 변형판 -->
<!-- selProduct, updProduct를 약간 변형해서 다른방법이 있는지 연구하는 용도로만 사용한다 -->
<mapper namespace="com.green.projectg3.product.ProductMapper">
    <!-- 구매할 상품을 추가하고 싶다면 추가할것 -->
    <!-- t_purchase_product라는 db 내에 있는 모든 테이블을 불러 데이터를 하나하나 조회하도록 한다 -->
    <insert id="insProduct" useGeneratedKeys="true" keyProperty="productPk">
        INSERT INTO t_purchase_product
        SET user_pk = #{userPk}, category_pk = #{categoryPk},
        product_nm = #{productNm}, memo = #{memo}
    </insert>

    <!-- 구매예정상품들을 조회 -->
    <select id="selProduct">
        <!-- 이전에는 if test로 isList가 0, 1, 2였을때 각각 그에 따른 쿼리를 적용하도록 했음 -->
        <!-- SELECT A.product_pk AS productPk, B.category_nm AS categoryNm,
        A.product_nm AS productNm, A.memo, A.buying_check AS buyingCheck,
        A.buying_date AS buyingDate, A.create_at AS createdAt
        FROM t_purchase_product A
        JOIN t_category B ON A.category_pk = B.category_pk
        WHERE A.user_pk = #{userPk}
        <if test="isList == 0">
            AND A.buying_check <![CDATA[<]]> 2
        </if>
        <if test="isList == 1">
            AND A.buying_check = 0
        </if>
        <if test="isList == 2">
            AND A.buying_check = 1
        </if>
        -->

        <!-- 원래는 createdAt도 dto에 띄움으로써 캘린더 기능도 구현하려고 했으나 -->
        <!-- 시간 부족으로 created_at은 dto에 띄우지 않는다 -->
        <!--
            <if test="buyingDate != '' and buyingDate != '0000-00-00'">
            AND DATE(buying_date) = #{buyingDate}
        </if>
        <if test="createdAt != '' and createdAt != '0000-00-00'">
            AND DATE(created_at) = #{createdAt}
        </if>
        -->

        <!-- 여기서는 용진이형처럼 choose 및 when 구문을 쓰되 0, 1, 2일때 -->
        <!-- select 구문도 같이 적용하도록 한다 -->

        <!-- isList가 0인경우, 구매예정 및 구매완료한 상품들 위주로 조회하도록 하고 -->
        <!-- isList가 1이라면, 구매예정의 상품들 위주로 조회하도록 한다 -->
        <!-- isList가 2일경우, 이 상품들은 삭제처리하고 productpk값들은 리스트에 저장할것 -->
        <choose>
            <!-- 만약 프론트에서 isList에 0을 넣게 된다면 -->
            <when test="choiceList == 0">
                SELECT A.product_pk AS productPk, B.category_nm AS categoryNm,
                A.product_nm AS productNm, A.memo, A.buying_check AS buyingCheck,
                A.buying_date AS buyingDate, A.created_at AS createdAt, A.category_pk AS categoryPk
                FROM t_purchase_product A
                <!-- t_purchase_product(A)에서 product_pk(productPk), product_nm(productNm), -->
                <!-- memo, buying_check(buyingCheck), buying_date(buyingDate)를 select하고 -->
                JOIN t_category B ON A.category_pk = B.category_pk
                <!-- t_purchase_product와 t_category(B)에 들어있는 공통의 category_pk를 적용함으로써 -->
                <!-- t_category를 t_purchase_product에서 조인하도록 한다 -->
                WHERE A.user_pk = #{userPk} AND A.buying_check <![CDATA[<]]> 2
                <!-- 이때 조건은 userPk는 dto에서 입력된 userPk를 적용하고 buying_check도 2미만인 데이터들 위주로 -->
                <!-- 조회하도록 한다 -->
            </when>
            <!-- 만약 isList에 1을 넣게 될경우 -->
            <when test="choiceList == 1">
                SELECT A.product_pk AS productPk, B.category_nm AS categoryNm,
                A.product_nm AS productNm, A.memo, A.buying_check AS buyingCheck,
                A.buying_date AS buyingDate, A.created_at AS createdAt, A.category_pk AS categoryPk
                FROM t_purchase_product A
                JOIN t_category B ON A.category_pk = B.category_pk
                WHERE A.user_pk = #{userPk} AND A.buying_check = 0
                <!-- buying_check가 0인, 즉 구매예정인 상품들 위주로 조회할것 -->
            </when>
            <!-- 만약 isList에 2를 넣게될경우 -->
            <when test="choiceList == 2">
                SELECT A.product_pk AS productPk, B.category_nm AS categoryNm,
                A.product_nm AS productNm, A.memo, A.buying_check AS buyingCheck,
                A.buying_date AS buyingDate, A.created_at AS createdAt, A.category_pk AS categoryPk
                FROM t_purchase_product A
                JOIN t_category B ON A.category_pk = B.category_pk
                WHERE A.user_pk = #{userPk} AND A.buying_check = 1
                <!-- buying_check이 2인 상품들을 1로 바꾸고 삭제된 확정난 상품들을 조회할것 -->
            </when>
        </choose>
    </select>
    <!-- 구매할 물건을 수정하는 쿼리문 -->
    <update id="updProduct">
        UPDATE t_purchase_product
        <!-- t_purchase_product를 업데이트한다 -->
        SET category_pk = #{categoryPk}, product_nm = #{productNm}, memo= #{memo}
        <!-- category_pk(categoryPk), product_nm(productNm), memo를 수정하도록 한다 -->
        WHERE product_pk = #{productPk} AND user_pk = #{userPk}
        <!-- 입력한 product_pk(productPk) 및 user_pk(userPk)에 해당되는 테이블까지 -->
    </update>
    <!-- 구매할 물건을 중간에 삭제하기 위한 쿼리문 -->
    <delete id="delProduct">
        DELETE FROM t_purchase_product
        <!-- t_purchase_product에서 삭제하도록 한다 -->
        <!--
        <where>
            product_pk IN
            <foreach collection="productPk" item="productPk" open="(" close=")" separator=",">
                #{productPk}
            </foreach>
            AND buying_check = 0 AND user_pk = #{userPk}
        </where>
        -->
        WHERE product_pk = #{productPk} AND buying_check = 0 AND user_pk = #{userPk}
        <!-- 이때 조건은 product_pk와 user_pk에서 입력받은 값이 있을 경우 삭제하도록 할것 -->
        <!-- foreach만 빼놓음 -->
    </delete>
    <!-- 구매확정 처리한 상품목록을 업데이트하기 위한 쿼리문 -->
    <update id="completeProduct">
        UPDATE t_purchase_product
        <!-- t_purchase_product에서 업데이트한다 -->
        SET buying_check = 1, buying_date = NOW()
        <!-- buying_check의 값을 1로 바꾸고 buying_date를 현재 날짜로 추가하도록 한다 -->
        WHERE product_pk = #{productPk} AND user_pk = #{userPk}
        <!-- 지정된 product_pk가 구매확정 났다면 -->
    </update>

    <!-- 확정난 상품을 취소하는 쿼리문 -->
    <update id = "returnProduct">
        UPDATE t_purchase_product
        SET buying_check = 0, buying_date = NULL
        WHERE product_pk = #{productPk} AND user_pk = #{userPk}
    </update>

    <!-- 구매확정 났을경우 리스트에서 삭제한것처럼 숨기고(2) 숨겨놓은 리스트에다가 pk값만 추가할것 -->
    <!-- 구매확정해서 삭제처리한 물건목록의 buying_check값을 2로 올린 뒤 -->
    <!-- 전달받은 product_pk을 foreach collection에서 속성값으로 넣어줘 숨길물건 목록에다 따로 처리하도록 하고 -->
    <!-- 그 이후에는 buying_check의 값을 다시 1로 되돌려놓는다. 구매확정난걸 삭제해야하기 때문 -->
    <update id="hideProduct">
        UPDATE t_purchase_product
        <!-- t_purchase_product에서 업데이트 한다 -->
        SET buying_check = 2
        <!-- 우선 buying_check의 값을 2로 올리고 -->
        WHERE product_pk = #{productPk} AND user_pk = #{userPk}
        <!-- 이때 조건은 -->
        <!--<foreach collection="productPk" item="productPk" open="(" close=")" separator=",">
            #{productPk}
            &lt;!&ndash; productPk라는 속성값에 입력받은 productPk를 넣고 이 속성은 숨길물건 목록에서 따로 처리하도록 한다 &ndash;&gt;
        </foreach>-->
        AND buying_check = 1
    </update>
    <!-- entity 쿼리문: t_purchase_product의 productPk 하나만으로 모든 컬럼값을 조회한다. -->
    <!--들어가야 할것: productPk, userPk, categoryPk, productNm, -->
    <!-- memo, createdAt, updatedAt, buyingCheck, buyingDate -->
    <select id="selEntity">
        SELECT product_pk AS productPk, user_pk as userPk, category_pk as categoryPk, product_nm as productNm,
        memo, created_at as createdAt, updated_at as updatedAt, buying_check as buyingCheck,
        buying_date as buyingDate
        FROM t_purchase_product
        WHERE product_pk = #{productPk}
    </select>

    <select id="checkByUser">
        <!-- 가입된 유저의 유무 -->
        SELECT user_pk AS userPk
        FROM t_user
        WHERE user_pk = #{userPk}
    </select>

</mapper>
